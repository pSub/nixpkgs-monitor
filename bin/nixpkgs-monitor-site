#!/usr/bin/env ruby

require 'sinatra'
require 'haml'
require 'sequel'
require 'nixpkgs_monitor/distro_packages'
require 'nixpkgs_monitor/package_updaters'
require 'nixpkgs_monitor/build_log'
require 'nixpkgs_monitor/reports'
require 'cgi'
require 'rss'
require 'diffy'
require 'uri'

DB = (ENV["DB"] && Sequel.connect(ENV["DB"])) || Sequel.sqlite('./db.sqlite')

set :base_url, (ENV["BASE_URL"] || "http://monitor.nixos.org/")
set :server, 'webrick'

  def cache
    @@cache ||= {}
  end

  def maintainers_with_email
    @@maintainers_with_email ||= DB[:nix_maintainers].select(:maintainer).distinct.order(:maintainer).map(:maintainer).
        map{ |m| m.strip }
  end

  def maintainers
    @@maintainers ||= maintainers_with_email.map{ |m| m.gsub(/<.*>/,"").strip }
  end

  def coverage
    @@coverage ||= DB[:estimated_coverage].all.
        each_with_object({}){ |c, coverage| coverage[c[:pkg_attr]] = c[:coverage] }
  end

  def coverage_stats
    @@coverage_stats ||= coverage.values.
        each_with_object(Hash.new(0)){ |c, cstat| cstat[c] += 1 }
  end

  def maintainer_stats
    @@maintainer_stats ||= NixPkgsMonitor::DistroPackages::Nix.packages.
        each_with_object(Hash.new(0)){ |pkg, mstat| mstat[pkg.maintainers.count] += 1 }
  end

  def outdated
    @@outdated ||= NixPkgsMonitor::PackageUpdaters::Updaters.each.
        with_object(Hash.new{|h,k| h[k] = Hash.new{|h,k| h[k] = Array.new } }) do |updater, data|
          DB[updater.friendly_name].all.each do |row|
            pkg = NixPkgsMonitor::DistroPackages::Nix.by_internal_name[row[:pkg_attr]]
            if pkg.nil? or pkg.branch.to_s.empty? or is_branch_update?(pkg, row[:version])
              data[row[:pkg_attr]][row[:version]] << updater.friendly_name.to_s
            end
          end
        end
  end

  def is_branch_update?(pkg, new_ver)
    return false if pkg.branch.to_s.empty?
    branch_t = NixPkgsMonitor::PackageUpdaters::Base.tokenize_version(pkg.branch)
    nv_t = NixPkgsMonitor::PackageUpdaters::Base.tokenize_version(new_ver)
    return (nv_t.nil? or branch_t.nil? or (nv_t[0..branch_t.size-1] == branch_t) )
  end

  def is_major_update?(pkg, new_ver)
    return not(is_branch_update?(pkg, new_ver)) unless pkg.branch.to_s.empty?
    v_t = NixPkgsMonitor::PackageUpdaters::Base.tokenize_version(pkg.version)
    nv_t = NixPkgsMonitor::PackageUpdaters::Base.tokenize_version(new_ver)
    return (
      not(v_t) or not(nv_t) or (v_t[0] != nv_t[0]) or
      (v_t[2]>=0 and (v_t[1] != nv_t[1]))
    )
  end

  def vulnerable
    unless @vulnerable
      @vulnerable = Hash.new{|h,k| h[k] = Hash.new{|h,k| h[k] = Set.new} }
      DB[:cve_match].all.each do |match|
        cve_product = "#{match[:product]}:#{match[:version]}"
        products = @vulnerable[match[:pkg_attr]]
        products[cve_product] << match[:CVE]
      end
    end
    return @vulnerable
  end

  def refresh
    @@vulnerable = nil
    @@outdated = nil
    @@maintainer_stats = nil
    @@coverage_stats = nil
    @@coverage = nil
    @@maintainers = nil
    @@maintainers_with_email = nil
    NixPkgsMonitor::DistroPackages::Nix.refresh
    cache.clear

    vulnerable
    outdated
    maintainer_stats
    coverage_stats
    coverage
    maintainers
  end


  def filter_packages(filter)

    have_patches = ( filter[:haspatch] ? Set.new( DB[:patches].select(:pkg_attr).distinct.map(:pkg_attr) ) : nil )

    good_patches = (filter[:hasgoodpatch] ?
                    Set.new( DB[:patches].join(:builds, :outpath => :outpath).where(:status => "ok").
                             select(:pkg_attr).distinct.map(:pkg_attr) ) :
                    nil )

    Set.new( NixPkgsMonitor::DistroPackages::Nix.by_internal_name.select { |pkg, nixpkg|
      # maintainer count
      (filter[:mc].to_s.empty? or filter[:mc].to_i == nixpkg.maintainers.count) and
      # coverage
      (filter[:c].to_s.empty? or filter[:c].to_i == coverage[pkg]) and
      #vulnerable
      (not filter[:vulnerable] or vulnerable.has_key?(pkg)) and
      # has a patch that builds
      (not filter[:hasgoodpatch] or good_patches.include?(pkg) ) and
      # has a patch
      (not filter[:haspatch] or have_patches.include?(pkg) ) and
      # outdated which has a minor update
      (not filter[:outdated_minor] or (outdated.has_key?(pkg) and outdated[pkg].keys.find{|v| not is_major_update?(nixpkg, v)}) ) and
      # outdated which has a major update
      (not filter[:outdated_major] or (outdated.has_key?(pkg) and outdated[pkg].keys.find{|v| is_major_update?(nixpkg, v)}) ) and
      #outdated
      (not filter[:outdated] or outdated.has_key?(pkg)) and
      # has maintainer
      (filter[:m].to_s.empty? or (nixpkg.maintainers.index{ |m| m.downcase.include? filter[:m].downcase }))
      # to be continued
    }.keys )
  end


  def render_checked(value)
    (value ? "checked" : "")
  end

  def render_selected(value)
    (value ? "selected" : "")
  end

  def render_filter(params)
    %{
      <form method=get>
        <div class=filteritem>
          Maintainers: <select name=mc>
            <option value=""> </option>#{
              maintainer_stats.keys.sort.
                  map{ |k| "<option #{ render_selected(params[:mc] == k.to_s) }>#{k}</option>" }.
                  join
            }
          </select><br>
          Coverage: <select name=c>
            <option value=""> </option>#{
              coverage_stats.keys.sort.
                  map{|k| "<option #{ render_selected(params[:c] == k.to_s) }>#{k}</option>"}.
                  join
            }
          </select>
        </div>
        <div class=filteritem style="text-align: left">
          <input type=checkbox name=vulnerable #{ render_checked(params[:vulnerable]) }>Vulnerable<br>
          <input type=checkbox name=haspatch #{ render_checked(params[:haspatch]) }>With patch
          (<input type=checkbox name=hasgoodpatch #{ render_checked(params[:hasgoodpatch]) }>that builds)<br>
          <input type=checkbox name=outdated #{ render_checked(params[:outdated]) }>Outdated:
          <input type=checkbox name=outdated_minor #{ render_checked(params[:outdated_minor]) }>Minor
          <input type=checkbox name=outdated_major #{ render_checked(params[:outdated_major]) }>Major
        </div>
        <div class=filteritem>
          Maintainer: <input type=text name=m value="#{params[:m]}"><br>
          <input type=submit value="Apply Filter">
        </div>
      </form>
    }
  end

  def render_versions(pkg, versions, patches, for_m)
    versions.map do |version, updaters|
      build_record = patches[ [ pkg, version ] ]
      patch_label = (build_record and build_record[0]) ? (build_record[0] == "ok" ? "label-success" : "label-danger" ) : "label-primary"

      if patches.key? ([ pkg, version ])
        "<span title=\"#{updaters.join(', ')}\"><a href=/patch?p=#{pkg}&v=#{version}#{for_m && "&m=#{CGI::escape(for_m)}"} class=\"label #{patch_label}\">#{version}</a></span>"
      else
        "<span title=\"#{updaters.join(', ')}\" class=\"label label-default\">#{version}</span>"
      end
    end.
    join(' ')
  end

  def render_cve(cve)
    %{<a href="http://web.nvd.nist.gov/view/vuln/detail?vulnId=#{cve.upcase}" class=cve>#{cve.upcase}</a>}
  end

  def render_pkgname(pkg, options = [])
    options = [ options ].flatten
    nixpkg = NixPkgsMonitor::DistroPackages::Nix.by_internal_name[pkg]
    %{<a href="#{options.include?(:with_base) ? settings.base_url : "/"}pd?p=#{pkg}" class=pkglink data-target=#{pkg}>#{pkg}#{
          nixpkg.branch ? "[#{nixpkg.branch}]" : ""
          }#{
          options.include?(:with_version) ? ":#{nixpkg.version}" : ""
      }</a>}
  end


helpers do

  def personalize_for
    (params[:for_m] && params[:for_m].downcase) ||
    (request.cookies['maintainer'] && request.cookies['maintainer'].downcase)
  end

  def personalize_list
    (["I'm..."] + maintainers).map{|m| "<option #{
        render_selected(personalize_for && m.downcase.include?(personalize_for))
      }>#{m}</option>"}.join
  end

  def rss_url
    uri =  URI.parse(request.fullpath)
    new_query_ar = URI.decode_www_form(uri.query || []) << ["rss", "on"]
    uri.query = URI.encode_www_form(new_query_ar)
    return uri.to_s
  end

  def rss_link
    @rss_available && %{<li><a href="#{rss_url}">rss</a></li>}
  end

  def rss_meta_link
    @rss_available && %{<link rel="alternate" title="RSS" href="#{rss_url}" type="application/rss+xml">}
  end

end


set(:rss_requested) { |value| condition { not(params[:rss].nil?) == value } }


get '/' do
  cache[:coverage_report] ||= coverage_stats.
      sort_by{ |cnum, ccnt| cnum }.
      map{ |c, cs| %{<tr><td>#{c}</td><td><a href="/coverage?c=#{c}">#{cs}</a></td></tr>} }.
      join

  cache[:maintainer_report] ||= maintainer_stats.
      sort_by{ |mnum, pcnt| mnum }.
      map{ |mc, ms| %{<tr><td>#{mc}</td><td><a href="/coverage?mc=#{mc}">#{ms}</a></td></tr>} }.
      join

  cache[:needsattention_report] ||= %{
      <tr><td>Potentially vulnerable</td><td><a href=/vulnerable>#{vulnerable.count}</a></td></tr>
      <tr><td>Unmaintained not covered</td><td><a href="/coverage?mc=0&amp;c=0">#{
        filter_packages({:c => 0, :mc => 0}).count
      }</a></td></tr>
      <tr><td>Outdated unmaintained</td><td><a href="/outdated?mc=0">#{
        filter_packages({:mc =>0, :outdated => true}).count
      }</a></td></tr>
      <tr><td>Outdated</td><td><a href=/outdated>#{outdated.count}</a></td></tr>
  }

  patches = DB[:patches].left_join(:builds, :outpath => :outpath)
  patch_stats = {
    :ok     => patches.where(:status => "ok").count,
    :failed => patches.exclude(:status => nil, :status => "ok").count,
    :queued => patches.where(:status => nil).count,
    :total  => DB[:patches].count,
  }

  cache[:task_report] = NixPkgsMonitor::Reports::Timestamps.all.
      map{|ts| %{
          <tr><td>#{ts[:action]}</td>
              <td>#{ts[:timestamp].utc.strftime("%Y-%m-%d %H:%M:%S")}</td>
              <td>#{ts[:message]}</td></tr>
      } }.
      join

  cache[:permaintainer_report] ||= maintainers.
      map{ |maintainer| %{
          <tr>
          <td>#{maintainer}</td>
          <td>#{filter_packages({ :m => maintainer }).count}</td>
          <td><a href="/outdated?m=#{CGI::escape(maintainer)}">#{filter_packages({ :m => maintainer, :outdated => true }).count}</a></td>
          <td><a href="/coverage?m=#{CGI::escape(maintainer)}&amp;c=0">#{filter_packages({ :m => maintainer, :c => 0 }).count}</a></td>
          <td><a href="/vulnerable?m=#{CGI::escape(maintainer)}">#{filter_packages({ :m => maintainer, :vulnerable => true }).count}</a></td>
          </tr>
      } }.
      join

  haml :dashboard, :layout => :layout, :locals => {
    :coverage_report => cache[:coverage_report],
    :maintainer_report => cache[:maintainer_report],
    :needsattention_report => cache[:needsattention_report],
    :patch_stats => patch_stats,
    :permaintainer_report => cache[:permaintainer_report],
    :task_report => cache[:task_report],
  }
end


get '/coverage' do
  filtered = filter_packages(params)
  report = coverage.
      select{ |pkg, c| filtered.include? pkg }.
      sort_by{ |pkg, c| c }.
      map{ |pkg, c| %{
        <tr><td>#{render_pkgname(pkg)}</td><td>#{c}</td>
        <td>#{NixPkgsMonitor::DistroPackages::Nix.by_internal_name[pkg].maintainers.count}</td></tr>
        <tr><td colspan=3 id=#{pkg}></td>
      } }.
      join

  haml :coverage, :layout => :layout,
       :locals => { :coverage_report => report, :filter => render_filter(params) }
end


before '/outdated' do
  filtered = filter_packages(params)
  @dataset = outdated.
      select{ |pkg, v| filtered.include? pkg }.
      sort_by{ |pkg, v| pkg }
  @patches = DB[:patches].left_join(:builds, :outpath => :outpath).select_hash_groups([:pkg_attr, :version], :status)
end

get '/outdated', :rss_requested => true do
  content_type "application/rss+xml", :charset => 'utf-8'

  RSS::Maker.make("2.0") do |maker|
    maker.channel.author = "Nixpkgs Monitor"
    maker.channel.updated = Time.now.to_s
    maker.channel.title = "Outdated packages"
    maker.channel.description = "Automatically detected updated versions of Nix packages"
    maker.channel.link = settings.base_url + "outdated"

    @dataset.each do |pkg, versions|
      versions.keys.each do |version|
        if params[:hasgoodpatch]
          build_record = @patches[ [ pkg, version ] ]
          next unless build_record and build_record[0] == "ok"
        end

        nixpkg = NixPkgsMonitor::DistroPackages::Nix.by_internal_name[pkg]
        maker.items.new_item do |item|
          item.title = "#{pkg}#{
              nixpkg.branch ? "[#{nixpkg.branch}]" : ""
            }:#{nixpkg.version} has a new version #{version}"
          item.description = "#{render_pkgname(pkg, [:with_version, :with_base])} has a new version #{version}"
        end
      end
    end
  end.to_s
end

get '/outdated', :rss_requested => false do
  @rss_available = true

  report = @dataset.map do |pkg, v|
      nixpkg = NixPkgsMonitor::DistroPackages::Nix.by_internal_name[pkg]
      %{
          <tr><td>#{render_pkgname(pkg)}#{
            vulnerable.has_key?(pkg) ?
              "<span class=vuln title=\"Matches #{ vulnerable[pkg].keys.join(', ')}\">(V)</span>" : ""
          }
          </td>
          <td>#{nixpkg.version}</td>
          <td>#{
              render_versions(pkg, v.select { |version, updaters| not is_major_update?(nixpkg, version) }, @patches, personalize_for)
          }</td><td>#{
              render_versions(pkg, v.select { |version, updaters| is_major_update?(nixpkg, version) }, @patches, personalize_for)
          }</td>
          <tr><td colspan=4 id=#{pkg}></td></tr>
      }
    end.
    join

  haml :outdated, :layout => :layout,
       :locals => { :outdated_report => report, :filter => render_filter(params.merge({:outdated => true})) }
end


get '/patch' do
  patch_record = DB[:patches][:pkg_attr => params[:p], :version => params[:v]]
  halt(404, 'no matching patch found') unless patch_record
  content_type 'text/plain', :charset => 'utf-8'
  %{
From: #{maintainers_with_email.select{|m| params[:m] and m.downcase.include? (params[:m].downcase)}.first ||
        "Nixpkgs Monitor <none@none>" }
Subject: #{params[:p]}: #{NixPkgsMonitor::DistroPackages::Nix.by_internal_name[params[:p]].version} -> #{params[:v]}#{
  vulnerable.has_key?(params[:p]) ? ", potentially fixes #{vulnerable[params[:p]].values.map{|s| s.to_a}.flatten.join(', ')}": ""
}

#{patch_record[:patch]}
  }
end


before '/vulnerable' do
  filtered = filter_packages(params)
  @dataset = vulnerable.
      select{ |pkg, v| filtered.include? pkg }.
      sort_by{ |pkg, v| pkg }
end

get '/vulnerable', :rss_requested => true do
  content_type "application/rss+xml", :charset => 'utf-8'

  RSS::Maker.make("2.0") do |maker|
    maker.channel.author = "Nixpkgs Monitor"
    maker.channel.updated = Time.now.to_s
    maker.channel.title = "Vulnerable packages"
    maker.channel.description = "Automatically detected matches of Nix packages against CVE vulnerability database"
    maker.channel.link = settings.base_url + "vulnerable"

    @dataset.each do |pkg, candidates|
      candidates.each do |prod, cves|
        cves.each do |cve|
          maker.items.new_item do |item|
            item.title = "#{pkg}:#{NixPkgsMonitor::DistroPackages::Nix.by_internal_name[pkg].version} matches #{cve} as #{prod}"
            item.description = "#{render_pkgname(pkg, [:with_version, :with_base])} matches #{render_cve(cve)} as #{prod}"
          end
        end
      end
    end
  end.to_s
end

get '/vulnerable', :rss_requested => false do
  @rss_available = true

  report = @dataset.
      map do |pkg, candidates|
        candidates.map do |prod, cves_raw|
          cves = cves_raw.sort.reverse
          %{
            <tr><td>#{render_pkgname(pkg, :with_version)}</td>
            <td>#{prod}</td>
            <td>#{cves[0..(cves.size>3 ? 1 : 2)].map{|cve| render_cve(cve)}.join(', ')}
                #{cves.size>3 ? "... #{cves.size} total" : ""}</td></tr>
            <tr><td colspan=3 id=#{pkg}></td>
          }
        end.
        join
      end.
      join

  haml :vulnerable, :layout => :layout,
      :locals => { :vulnerable_report => report, :filter => render_filter(params.merge({:vulnerable => true})) }
end


get '/pd' do
  halt "package not specified" unless params[:p]
  pkg = NixPkgsMonitor::DistroPackages::Nix.by_internal_name[params[:p]]
  halt "package not found" unless pkg
  %{
    #{ request.xhr? ? "" :
      %{
        <!DOCTYPE HTML>
        <html>
          <head>
            <link rel="stylesheet" href="http://hydra.nixos.org/static/bootstrap/css/bootstrap.min.css" type="text/css" />
            <link rel="stylesheet" href="/default.css" type="text/css" />
            <title>#{params[:p]}</title>
            <meta charset="utf-8"/>
          </head>
          <body>
      }
    }
    <h4>Information:</h4>
    <table class="table table-striped table-condensed">
      <tr><td>Package:</td><td>#{pkg.internal_name}</td>
      <tr><td>Name:</td><td>#{pkg.name}</td>
      <tr><td>Version:</td><td>#{pkg.version}</td>
      <tr><td>Source:</td><td>#{pkg.url}</td>
      <tr><td>Vulnerable:</td><td>#{vulnerable.has_key?(pkg.internal_name) ? "<span class=vuln>YES</span>" : "no"}</td>
    </table>
    #{ vulnerable.has_key?(pkg.internal_name) ?
      %{
        <table>
        <tr><th>Matches to</th><th>CVEs</th>
        #{
          vulnerable[pkg.internal_name].
              map do |prod, cves|
                %{
                  <tr>
                  <td>#{prod}</td>
                  <td>#{cves.sort.reverse.
                          map{|cve| render_cve(cve) }.
                          join(', ')
                      }
                  </td>
                  </tr>
                }
              end.
              join
        }
        </table>
      } : ""
    }

    #{ outdated.has_key?(pkg.internal_name) ?
      %{
        <h4>Available updates:</h4>
        <table class="table table-striped table-condensed">
        <tr><th>Version</th><th>Reported by</th><th>Tarball</th><th>Patch</th><th>Log</th>
        #{
          outdated[params[:p]].map do |version, updaters|
            patch = DB[:patches][:pkg_attr => pkg.internal_name, :version => version]
            build = (patch ? DB[:builds][:outpath => patch[:outpath]] : nil)
            tarball = DB[:tarballs].join(:tarball_sha256,:tarball => :tarball).
                          exclude(:sha256 => "404")[:pkg_attr => pkg.internal_name, :version => version]
            url = (tarball ? tarball [:tarball] : "")
            %{<tr>
              <td>#{version}</td>
              <td>#{updaters.join ", "}</td>
              <td><a href="#{url}">#{url}</a></td>
              <td>#{ patch ? "<a href=/patch?p=#{pkg.internal_name}&v=#{version}#{personalize_for && "&m=#{CGI::escape(personalize_for)}"}>yes</a>" : "" }</td>
              <td>#{ build ? "<a href=/buildlog?outpath=#{CGI::escape(build[:outpath])}>#{build[:status]}</a>(<a href=/builddiff?old=#{CGI::escape(pkg.outpath)}&new=#{CGI::escape(build[:outpath])}>diff</a>)" : "" }</td>
              </tr>
            }
          end.
          join
        }
      } : ""
    }
    </table>
    #{ request.xhr? ? "" : "</body></html>" }
  }
end


get '/buildlog' do
  halt 404, "derivation not specified" unless params[:outpath]
  log = NixPkgsMonitor::BuildLog.get_log(params[:outpath])
  halt 404, "log not found" unless log
  content_type 'text/plain', :charset => 'utf-8'

  lint = NixPkgsMonitor::BuildLog.lint(log)

  %{
#{ lint.empty? ? "" :
%{An INCOMPLETE list of issues:
#{lint.join}

}
}
#{log}
  }
end


get '/builddiff' do
  halt 404, "derivations not specified" unless params[:old] and params[:new]
  oldlog = NixPkgsMonitor::BuildLog.get_log(params[:old])
  newlog = NixPkgsMonitor::BuildLog.get_log(params[:new])
  halt 404, "log not found" unless oldlog and newlog

  "<style>#{Diffy::CSS}</style>" +
  Diffy::Diff.new(NixPkgsMonitor::BuildLog.sanitize(oldlog, params[:old]),
                  NixPkgsMonitor::BuildLog.sanitize(newlog, params[:new]),
                  :context => 2).to_s(:html)
end


get '/report' do
  available_reports = {
    :version_mismatch =>
        "Nix packages for which either tarball name can't be parsed or its version doesn't match the package version",
    :nixpkgs_failed_name_parse =>
        "Nix packages for which it was impossible to determine version from name string",
    :nixpkgs_no_sources =>
        "Nix packages for which no sources were specified in Nixpkgs",
  }

  report_name = params[:name] ? params[:name].to_sym : nil
  if report_name and not report_name.empty? and DB.table_exists?(report_name)
    report_header = DB[report_name].columns!.map{ |r_name| "<th>#{r_name}</th>" }.join
    report_body = DB[report_name].map do |row| %{
      <tr>#{row.values.map{|v| "<td>#{v}</td>"}.join}</tr> }
    end.
    join

    haml :report, :layout => :layout, :locals =>
        { :report_header => report_header, :report_body => report_body }
  else
    reports = available_reports.
      map do |r_name, r_desc| %{
        <tr><td><a href=/report?name=#{r_name}>#{r_name}</a></td>
        <td>#{DB.table_exists?(r_name) ? DB[r_name].count : 0}</td>
        <td>#{r_desc}</td></tr> }
      end.
      join

    haml :reports, :layout => :layout, :locals => { :reports => reports }
  end
end


get '/refresh' do
  refresh
  redirect back
end


get '/rawdb' do
  send_file 'db.sqlite'
end


get '/default.css' do
  content_type 'text/css', :charset => 'utf-8'
<<STYLE
div.dashitem, div.header {
    margin: 0.5em;
    background-color: white;

    border: 1px solid black;
    padding: 1em;
}
div.dashitem { float: left; }
div.dashitem th {
    border-bottom: dotted 1px;
}
div.dashitem table.table { margin-bottom:0 }
div.links { float: right }
div.filteritem { float: left; text-align: right; padding: 0 1em }
div.filteritem select { width: 2em }
span.vuln { color:red }

.label-primary{background-color:#428bca}
.label-primary[href]:hover,.label-primary[href]:focus{background-color:#3071a9}

.label-success{background-color:#5cb85c}
.label-success[href]:hover,.label-success[href]:focus{background-color:#449d44}

.label-danger{background-color:#d9534f}
.label-danger[href]:hover,.label-danger[href]:focus{background-color:#c9302c}
STYLE
end


get '/packagedetails.js' do
  content_type 'text/javascript', :charset => 'utf-8'
<<DETAILS
function showPackageDetails(obj) {
  var elem = document.getElementById(obj.dataset.target);
  if (elem.innerHTML == "") {
    elem.innerHTML = "querying...";
    var xmlhttp = new XMLHttpRequest();
    xmlhttp.onreadystatechange = function() {
      if (xmlhttp.readyState==4 && xmlhttp.status==200) {
        elem.innerHTML=xmlhttp.responseText;
      }
    }
    xmlhttp.open("GET","/pd?p=" + obj.dataset.target,true);
    xmlhttp.send();
  } else {
    elem.innerHTML = "";
  }
  return true;
}

var list = document.getElementsByClassName('pkglink');
for (var i = 0; i < list.length; i++) {
  list[i].onclick = (function(obj) {
    return function() {
      return !showPackageDetails(obj);
    }
  })(list[i]);
}

function setCookie(cname,cvalue,exdays) {
  var d = new Date();
  d.setTime(d.getTime()+(exdays*24*60*60*1000));
  var expires = "expires="+d.toGMTString();
  document.cookie = cname + "=" + cvalue + "; " + expires;
}

var identify = document.getElementById('identify');

if(identify) {
  identify.onchange = (function() {
    setCookie('maintainer', identify.value, 356);
    return !(location.reload());
  } )
}

DETAILS
end


__END__

@@layout
<!DOCTYPE HTML>
%html
  %head
    <link rel="stylesheet" href="https://hydra.nixos.org/static/bootstrap/css/bootstrap.min.css" type="text/css" />
    <link rel="stylesheet" href="https://hydra.nixos.org/static/css/hydra.css" type="text/css" />
    <link rel="stylesheet" href="https://hydra.nixos.org/static/bootstrap/css/bootstrap-responsive.min.css" type="text/css" />
    <link rel="stylesheet" href="default.css" type="text/css" />
    = rss_meta_link
    %title NixPkgs Monitor
    <meta charset="utf-8"/>
  %body
    .navbar.navbar-fixed-top
      .navbar-inner
        .container
          %a.brand(href="http://monitor.nixos.org")
            <img src="https://hydra.nixos.org/logo" alt="Nix logo" class="logo"/> Nixpkgs monitor

          .nav-collapse.collapse
            %ul.nav.pull-right
              %li
                %select#identify(name="maintainer")
                  = personalize_list
              = rss_link
              %li
                %a(href="http://github.com/phreedom/nixpkgs-monitor/blob/master/help.md") info
              %li
                %a(href="http://github.com/phreedom/nixpkgs-monitor") source

    .skip-topbar

    .container
      = yield

    <script type="text/javascript" src="packagedetails.js"></script>


@@dashboard

.container
  .dashitem#patches
    %table.table.table-striped.table-condensed
      %tr
        %th Patches
        %th #
      %tr
        %td Built
        %td
          = patch_stats[:ok]
      %tr
        %td Failed
        %td
          = patch_stats[:failed]
      %tr
        %td Queued
        %td
          = patch_stats[:queued]
      %tr
        %td Total
        %td
          %a(href="/outdated?haspatch=on")
            = patch_stats[:total]

  .dashitem#needsattention
    %table.table.table-striped.table-condensed
      %tr
        %th Packages
        %th #
      = needsattention_report

.container
  .dashitem#coverage
    %table.table.table-striped.table-condensed
      %tr
        %th Coverage
        %th Packages
      = coverage_report

  .dashitem#maintainers
    %table.table.table-striped.table-condensed
      %tr
        %th Maintainers
        %th Packages
      = maintainer_report

.container
  .dashitem#permaintainer
    %table.table.table-striped.table-condensed
      %tr
        %th Maintainer
        %th Packages
        %th Outdated
        %th Not covered
        %th Vulnerable
      = permaintainer_report

.container
  .dashitem#tasks
    %table.table.table-striped.table-condensed
      %tr
        %th Task
        %th Timestamp
        %th Status
      = task_report


@@coverage

.dashitem
  = filter

.dashitem
  %table.table.table-striped.table-condensed
    %tr
      %th Attr Path
      %th Estimated Coverage
      %th Maintainers
    = coverage_report


@@outdated

.dashitem
  = filter

.dashitem
  %table.table.table-striped.table-condensed
    %tr
      %th Attr Path
      %th Current
      %th Minor Update(s)
      %th Major Update(s)
    = outdated_report


@@vulnerable

.dashitem
  = filter

.dashitem
  %table.table.table-striped.table-condensed
    %tr
      %th Attr Path/Version
      %th CVE Product
      %th CVE ID(s)
    = vulnerable_report


@@reports

.dashitem
  %table.table.table-striped.table-condensed
    %tr
      %th Report
      %th # of Entries
      %th Description
    = reports


@@report

.dashitem
  %table.table.table-striped.table-condensed
    %tr
      = report_header
    = report_body
